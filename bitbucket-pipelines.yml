# This is build configuration for MTVA console application.

# Check our guides at https://confluence.atlassian.com/x/e8YWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----

# Specify a docker image from Docker Hub as your build environment.
# All of your pipeline scripts will be executed within this docker image.

# You can specify a custom docker image from Docker Hub as your build environment.
#image: akoncsag/php:deploy

# All of your Pipelines will be defined in the `pipelines` section.
# You can have any number of Pipelines, but they must all have unique
# names. The default Pipeline is simply named `default`.

# Bitbucket Pipelines now includes the option to allocate additional resources.
# By specifying the size of '2x', your pipeline will include double the resources (eg. 4GB memory â†’ 8GB memory).
#options:
#  size: 2x
pipelines:
    branches:
      master:
        # Each Pipeline consists of one or more steps which each execute
        # sequentially in separate docker containers.
        #
        # name: optional name for this step
        # script: the commands you wish to execute in this step, in order
        - step:
            name: NPM Build
            image: node:10.22
            caches:
              - node
            script:
              - npm install
              - npm run dev
              #- npm run tests ???
            artifacts:
              - public/**
        - step:
            name: PHP Build
            image:
              name: akoncsag/php:deploy
            caches:
              - composer
            script:
              # Your Pipeline automatically contains a copy of your code in its working
              # directory; however, the docker image may not be preconfigured with all
              # of the PHP/Laravel extensions your project requires. You may need to install
              # them yourself, as shown below.
              - composer install --optimize-autoloader --no-interaction --prefer-dist --ignore-platform-reqs --optimize-autoloader
            services:
              - mysql
            artifacts:
              - vendor/**
        - step:
            name: PHP Test
            image:
              name: akoncsag/php:deploy
            script:
              # Here we create link between the .env.pipelines file and the .env file
              # so that our database can retreieve all the variables inside .env.pipelines
              - ln -f -s .env.pipelines .env
  
              # Start up the php server so that we can test against it
              - php artisan migrate
              - php artisan serve &
  
              # Give the server some time to start
              - sleep 5
  
              # One common use case of Pipelines is running Unit Tests on your codebase.
              # In PHP, this is commonly done with PHPUnit.
              - php artisan test
              - curl -vk http://localhost:8000
            services:
              - mysql
        - step:
            name: Deploy (Production)
            deployment: production
            image:
              name: akoncsag/php:deploy
            script:
              # Remote server task runner
              - envoy run deploy --host=$DEPLOY_HOST --user=$DEPLOY_USER --path=$DEPLOY_PATH --build=$BITBUCKET_BUILD_NUMBER --commit=$BITBUCKET_COMMIT --branch=$BITBUCKET_BRANCH --php=php --dir=$BITBUCKET_CLONE_DIR
  # You might want to create and access a service (like a database) as part
  # of your Pipeline workflow. You can do so by defining it as a service here.
  definitions:
    services:
      mysql:
        image: mysql:5.7
        environment:
          MYSQL_DATABASE: 'mtva-test'
          MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
          MYSQL_USER: 'homestead'
          MYSQL_PASSWORD: 'secret'
  